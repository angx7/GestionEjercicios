CLASE Parametros:
    ATRIBUTOS DE CLASE:
        SEC_POR_REP: ENTERO ← 5
        DESCANSO_ENTRE_SERIES: ENTERO ← 30
FIN CLASE

CLASE Utilidades:
    MÉTODO ESTÁTICO minutos_a_texto(mins: REAL) → CADENA:
        total ← ENTERO(REDONDEAR(mins * 60))
        m ← total DIV 60
        s ← total - (m * 60)
        DEVOLVER m + " min " + s + " s"
    FIN

    MÉTODO ESTÁTICO normalizar(s: CADENA) → CADENA:
        DEVOLVER MINUSC(TRIM(s))
    FIN
FIN CLASE

CLASE Ejercicio:
    ATRIBUTOS:
        nombre: CADENA
        repeticiones: ENTERO
        series: ENTERO
        sec_por_rep: ENTERO
        descanso_entre_series: ENTERO

    MÉTODO __init__(nombre, repeticiones, series, sec_por_rep=Parametros.SEC_POR_REP, descanso_entre_series=Parametros.DESCANSO_ENTRE_SERIES):
        ESTE.nombre ← TRIM(nombre)
        ESTE.repeticiones ← ENTERO(repeticiones)
        ESTE.series ← ENTERO(series)
        ESTE.sec_por_rep ← ENTERO(sec_por_rep)
        ESTE.descanso_entre_series ← ENTERO(descanso_entre_series)
        ESTE._validar()
    FIN

    MÉTODO PRIVADO _validar() → NADA:
        SI nombre = "" → ERROR "El nombre del ejercicio no puede estar vacío."
        SI repeticiones ≤ 0 → ERROR "Las repeticiones deben ser mayores a 0."
        SI repeticiones > 100 → ERROR "Las repeticiones no pueden ser mayores a 100."
        SI series ≤ 0 → ERROR "Las series deben ser mayores a 0."
        SI series > 100 → ERROR "Las series no pueden ser mayores a 100."
        SI sec_por_rep ≤ 0 → ERROR "Los segundos por repetición deben ser mayores a 0."
        SI descanso_entre_series < 0 → ERROR "El descanso entre series no puede ser negativo."
    FIN

    MÉTODO cambiar_nombre(nuevo_nombre: CADENA) → NADA:
        nuevo ← TRIM(nuevo_nombre)
        SI nuevo = "" → ERROR "El nombre del ejercicio no puede quedar vacío."
        ESTE.nombre ← nuevo
    FIN

    MÉTODO actualizar(repeticiones?: ENTERO, series?: ENTERO) → NADA:
        SI repeticiones ≠ NULO:
            SI repeticiones ≤ 0 → ERROR
            SI repeticiones > 100 → ERROR
            ESTE.repeticiones ← ENTERO(repeticiones)
        SI series ≠ NULO:
            SI series ≤ 0 → ERROR
            SI series > 100 → ERROR
            ESTE.series ← ENTERO(series)
    FIN

    MÉTODO duracion_minutos() → REAL:
        movimiento ← repeticiones * sec_por_rep * series
        descanso_series ← series - 1
        SI descanso_series < 0 → descanso_series ← 0
        descanso ← descanso_entre_series * descanso_series
        DEVOLVER (movimiento + descanso) / 60.0
    FIN

    MÉTODO __str__() → CADENA:
        DEVOLVER nombre + " | reps: " + STR(repeticiones) + " | series: " + STR(series) +
                " | estimado: " + Utilidades.minutos_a_texto(ESTE.duracion_minutos())
    FIN
FIN CLASE

CLASE Rutina:
    ATRIBUTOS:
        nombre: CADENA
        descripcion: CADENA
        ejercicios: LISTA[Ejercicio]

    MÉTODO __init__(nombre: CADENA, descripcion: CADENA, ejercicios: LISTA[Ejercicio]):
        ESTE.nombre ← TRIM(nombre)
        ESTE.descripcion ← TRIM(descripcion)
        ESTE.ejercicios ← LISTA_VACÍA
        i ← 0
        MIENTRAS i < TAM(ejercicios):
            AÑADIR ejercicios[i] A ESTE.ejercicios
            i ← i + 1
        FIN MIENTRAS
        ESTE._validar()
    FIN

    MÉTODO PRIVADO _validar() → NADA:
        SI nombre = "" → ERROR "El nombre de la rutina no puede estar vacío."
        SI descripcion = "" → ERROR "La descripción de la rutina no puede estar vacía."
        SI TAM(ejercicios) = 0 → ERROR "Una rutina debe tener al menos un ejercicio."
        vistos: LISTA[CADENA] ← []
        i ← 0
        MIENTRAS i < TAM(ejercicios):
            key ← Utilidades.normalizar(ejercicios[i].nombre)
            // buscar duplicado en 'vistos' sin sets
            j ← 0; repetido ← FALSO
            MIENTRAS j < TAM(vistos):
                SI key = vistos[j] → repetido ← VERDADERO; ROMPER
                j ← j + 1
            FIN
            SI repetido → ERROR "Hay ejercicios duplicados por nombre dentro de la rutina."
            AÑADIR key A vistos
            i ← i + 1
        FIN
    FIN

    MÉTODO agregar_ejercicio(ejercicio: Ejercicio) → NADA:
        key_nuevo ← Utilidades.normalizar(ejercicio.nombre)
        i ← 0
        MIENTRAS i < TAM(ejercicios):
            SI Utilidades.normalizar(ejercicios[i].nombre) = key_nuevo → ERROR "Ya existe un ejercicio 'X' en la rutina."
            i ← i + 1
        FIN
        AÑADIR ejercicio A ejercicios
    FIN

    MÉTODO eliminar_ejercicio(nombre_ejercicio: CADENA) → NADA:
        key ← Utilidades.normalizar(nombre_ejercicio)
        nueva ← LISTA_VACÍA
        encontrado ← FALSO
        i ← 0
        MIENTRAS i < TAM(ejercicios):
            ej ← ejercicios[i]
            SI Utilidades.normalizar(ej.nombre) = key → encontrado ← VERDADERO
            SINO → AÑADIR ej A nueva
            i ← i + 1
        FIN
        SI NO encontrado → ERROR "No se encontró el ejercicio para eliminar."
        SI TAM(nueva) = 0 → ERROR "La rutina no puede quedarse vacía; agrega otro ejercicio o cancela la eliminación."
        ejercicios ← nueva
    FIN

    MÉTODO actualizar_datos(nombre?: CADENA, descripcion?: CADENA) → NADA:
        SI nombre ≠ NULO:
            nuevo ← TRIM(nombre)
            SI nuevo = "" → ERROR "El nombre de la rutina no puede quedar vacío."
            ESTE.nombre ← nuevo
        SI descripcion ≠ NULO:
            nueva ← TRIM(descripcion)
            SI nueva = "" → ERROR "La descripción de la rutina no puede quedar vacía."
            ESTE.descripcion ← nueva
    FIN

    MÉTODO actualizar_ejercicio(nombre_ejercicio: CADENA, repeticiones?: ENTERO, series?: ENTERO) → NADA:
        ej ← ESTE._buscar(nombre_ejercicio)    // lanza error si no existe
        ej.actualizar(repeticiones, series)
    FIN

    MÉTODO PRIVADO _buscar(nombre_ejercicio: CADENA) → Ejercicio:
        key ← Utilidades.normalizar(nombre_ejercicio)
        i ← 0
        MIENTRAS i < TAM(ejercicios):
            SI Utilidades.normalizar(ejercicios[i].nombre) = key → DEVOLVER ejercicios[i]
            i ← i + 1
        FIN
        ERROR "Ejercicio no encontrado en la rutina."
    FIN

    MÉTODO duracion_total_min() → REAL:
        total ← 0.0
        i ← 0
        MIENTRAS i < TAM(ejercicios):
            total ← total + ejercicios[i].duracion_minutos()
            i ← i + 1
        FIN
        DEVOLVER total
    FIN

    MÉTODO __str__() → CADENA:
        DEVOLVER "Rutina: " + nombre + "\n" +
                 "Descripción: " + descripcion + "\n" +
                 "Total: " + Utilidades.minutos_a_texto(ESTE.duracion_total_min()) + "\n" +
                 "Ejercicios: " + STR(TAM(ejercicios))
    FIN
FIN CLASE

CLASE Usuario:
    ATRIBUTOS:
        nombre: CADENA
        edad: ENTERO
        rutinas: LISTA[Rutina]

    MÉTODO __init__(nombre, edad):
        ESTE.nombre ← TRIM(nombre)
        ESTE.edad ← ENTERO(edad)
        ESTE.rutinas ← []
        ESTE._validar()
    FIN

    MÉTODO PRIVADO _validar() → NADA:
        SI nombre = "" → ERROR "El nombre del usuario no puede estar vacío."
        SI edad < 16 → ERROR "La edad debe ser ≥ 16 años."
        SI edad > 100 → ERROR "La edad debe ser ≤ 100 años."
    FIN

    MÉTODO cambiar_nombre(nuevo_nombre: CADENA) → NADA:
        nuevo ← TRIM(nuevo_nombre)
        SI nuevo = "" → ERROR
        nombre ← nuevo
    FIN

    MÉTODO cambiar_edad(nueva_edad: ENTERO) → NADA:
        SI nueva_edad < 16 → ERROR
        SI nueva_edad > 100 → ERROR
        edad ← ENTERO(nueva_edad)
    FIN

    MÉTODO asignar_rutina(rutina: Rutina) → NADA:
        key_rutina ← Utilidades.normalizar(rutina.nombre)
        i ← 0
        MIENTRAS i < TAM(rutinas):
            SI Utilidades.normalizar(rutinas[i].nombre) = key_rutina → ERROR "El usuario ya tiene esa rutina."
            i ← i + 1
        FIN
        AÑADIR rutina A rutinas
    FIN

    MÉTODO __str__() → CADENA:
        DEVOLVER "Usuario: " + nombre + " | Edad: " + STR(edad) + " | Rutinas: " + STR(TAM(rutinas))
    FIN
FIN CLASE

CLASE SistemaGestion:
    ATRIBUTOS:
        usuarios: LISTA[Usuario]
        ejercicios_catalogo: LISTA[Ejercicio]
        rutinas: LISTA[Rutina]
        idx_usuarios: DICC[CADENA → Usuario]
        idx_ejercicios: DICC[CADENA → Ejercicio]
        idx_rutinas: DICC[CADENA → Rutina]

    MÉTODO __init__():
        usuarios ← []
        ejercicios_catalogo ← []
        rutinas ← []
        idx_usuarios ← {}
        idx_ejercicios ← {}
        idx_rutinas ← {}
    FIN

    // ------- Helpers I/O -------
    MÉTODO ESTÁTICO _input_no_vacio(msg: CADENA) → CADENA:
        MIENTRAS VERDADERO:
            txt ← TRIM(LEER(msg))
            SI txt ≠ "" → DEVOLVER txt
            IMPRIMIR "El valor no puede estar vacío."
        FIN
    FIN

    MÉTODO ESTÁTICO _input_int(msg: CADENA, minimo?: ENTERO, maximo?: ENTERO) → ENTERO:
        MIENTRAS VERDADERO:
            texto ← TRIM(LEER(msg))
            INTENTA:
                val ← ENTERO(testo)
                SI (minimo ≠ NULO) Y (val < minimo) → IMPRIMIR "≥ minimo"; CONTINUAR
                SI (maximo ≠ NULO) Y (val > maximo) → IMPRIMIR "≤ maximo"; CONTINUAR
                DEVOLVER val
            CAPTURA ValueError:
                IMPRIMIR "Ingresa un número entero válido."
        FIN
    FIN

    // ------- Usuarios -------
    MÉTODO _buscar_usuario(nombre: CADENA) → Usuario|NULO:
        DEVOLVER idx_usuarios.get(Utilidades.normalizar(nombre))
    FIN

    MÉTODO agregar_usuario(nombre: CADENA, edad: ENTERO) → NADA:
        key ← Utilidades.normalizar(nombre)
        SI key EN idx_usuarios → ERROR "Ya existe un usuario con ese nombre."
        u ← NUEVO Usuario(nombre, edad)
        idx_usuarios[key] ← u
        AÑADIR u A usuarios
    FIN

    MÉTODO listar_usuarios() → NADA:
        SI TAM(usuarios) = 0 → IMPRIMIR "No hay usuarios."; RETORNAR
        i ← 0
        MIENTRAS i < TAM(usuarios):
            IMPRIMIR usuarios[i].__str__()
            i ← i + 1
        FIN
    FIN

    MÉTODO mostrar_rutinas_de_usuario(nombre_usuario: CADENA) → NADA:
        u ← _buscar_usuario(nombre_usuario)
        SI u = NULO → IMPRIMIR "Usuario no encontrado."; RETORNAR
        SI TAM(u.rutinas) = 0 → IMPRIMIR u.nombre + " no tiene rutinas asignadas."; RETORNAR
        IMPRIMIR "Rutinas de " + u.nombre + ":"
        i ← 0
        MIENTRAS i < TAM(u.rutinas):
            r ← u.rutinas[i]
            IMPRIMIR "  - " + r.nombre + ": " + Utilidades.minutos_a_texto(r.duracion_total_min())
            i ← i + 1
        FIN
    FIN

    // ------- Ejercicios (catálogo) -------
    MÉTODO _buscar_ejercicio_catalogo(nombre: CADENA) → Ejercicio|NULO:
        DEVOLVER idx_ejercicios.get(Utilidades.normalizar(nombre))
    FIN

    MÉTODO crear_ejercicio(nombre: CADENA, repeticiones: ENTERO, series: ENTERO) → NADA:
        key ← Utilidades.normalizar(nombre)
        SI key EN idx_ejercicios → ERROR "Ya existe un ejercicio con ese nombre."
        ej ← NUEVO Ejercicio(nombre, repeticiones, series)
        idx_ejercicios[key] ← ej
        AÑADIR ej A ejercicios_catalogo
        IMPRIMIR "Ejercicio creado. Duración estimada: " + Utilidades.minutos_a_texto(ej.duracion_minutos())
    FIN

    MÉTODO listar_ejercicios() → NADA:
        SI TAM(ejercicios_catalogo) = 0 → IMPRIMIR "(Catálogo vacío)"; RETORNAR
        i ← 0
        MIENTRAS i < TAM(ejercicios_catalogo):
            IMPRIMIR "- " + ejercicios_catalogo[i].__str__()
            i ← i + 1
        FIN
    FIN

    MÉTODO eliminar_ejercicio(nombre: CADENA) → NADA:
        key ← Utilidades.normalizar(nombre)
        ej ← idx_ejercicios.pop(key, NULO)
        SI ej = NULO → ERROR "No se encontró el ejercicio para eliminar."
        // quitar de lista conservando orden
        nueva ← []
        i ← 0
        MIENTRAS i < TAM(ejercicios_catalogo):
            SI ejercicios_catalogo[i] ≠ ej → AÑADIR ejercicios_catalogo[i] A nueva
            i ← i + 1
        FIN
        ejercicios_catalogo ← nueva
        // intentar quitar de rutinas, ignorando errores (no romper rutinas)
        i ← 0
        MIENTRAS i < TAM(rutinas):
            INTENTA: rutinas[i].eliminar_ejercicio(ej.nombre)
            CAPTURA ValueError: NADA
            i ← i + 1
        FIN
    FIN

    MÉTODO obtener_ejercicios_por_nombres(nombres: LISTA[CADENA]) → LISTA[Ejercicio]:
        res ← []
        vistos ← []
        i ← 0
        MIENTRAS i < TAM(nombres):
            n ← nombres[i]
            key ← Utilidades.normalizar(n)
            // chequear repetido en 'vistos'
            j ← 0; repetido ← FALSO
            MIENTRAS j < TAM(vistos):
                SI key = vistos[j] → repetido ← VERDADERO; ROMPER
                j ← j + 1
            FIN
            SI repetido → ERROR "Nombre de ejercicio repetido en la selección: 'n'."
            ej ← idx_ejercicios.get(key)
            SI ej = NULO → ERROR "Ejercicio 'n' no existe en el catálogo."
            AÑADIR ej A res
            AÑADIR key A vistos
            i ← i + 1
        FIN
        DEVOLVER res
    FIN

    // ------- Rutinas -------
    MÉTODO _buscar_rutina(nombre: CADENA) → Rutina|NULO:
        DEVOLVER idx_rutinas.get(Utilidades.normalizar(nombre))
    FIN

    MÉTODO crear_rutina(nombre: CADENA, descripcion: CADENA, nombres_ejercicios: LISTA[CADENA]) → NADA:
        SI TAM(ejercicios_catalogo) = 0 → ERROR "Primero crea ejercicios en el catálogo."
        SI TAM(nombres_ejercicios) = 0 → ERROR "Debes seleccionar al menos un ejercicio para la rutina."
        key ← Utilidades.normalizar(nombre)
        SI key EN idx_rutinas → ERROR "Ya existe una rutina con ese nombre."
        ejercicios ← ESTE.obtener_ejercicios_por_nombres(nombres_ejercicios)
        r ← NUEVO Rutina(nombre, descripcion, ejercicios)
        idx_rutinas[key] ← r
        AÑADIR r A rutinas
    FIN

    MÉTODO listar_rutinas() → NADA:
        SI TAM(rutinas) = 0 → IMPRIMIR "No hay rutinas."; RETORNAR
        IMPRIMIR REPETIR("-", 60)
        i ← 0
        MIENTRAS i < TAM(rutinas):
            r ← rutinas[i]
            IMPRIMIR r.__str__()
            k ← 0
            MIENTRAS k < TAM(r.ejercicios):
                IMPRIMIR "  • " + r.ejercicios[k].__str__()
                k ← k + 1
            FIN
            IMPRIMIR REPETIR("-", 60)
            i ← i + 1
        FIN
    FIN

    MÉTODO editar_rutina(nombre: CADENA, nuevo_nombre?: CADENA, nueva_desc?: CADENA) → NADA:
        r ← _buscar_rutina(nombre)
        SI r = NULO → ERROR "Rutina no encontrada."
        old_key ← Utilidades.normalizar(r.nombre)
        SI nuevo_nombre ≠ NULO:
            propuesto_key ← Utilidades.normalizar(nuevo_nombre)
            SI (propuesto_key ≠ old_key) Y (propuesto_key EN idx_rutinas) → ERROR "Ya existe otra rutina con ese nombre."
        r.actualizar_datos(nuevo_nombre, nueva_desc)
        new_key ← Utilidades.normalizar(r.nombre)
        SI new_key ≠ old_key:
            ELIMINAR idx_rutinas[old_key]
            idx_rutinas[new_key] ← r
    FIN

    MÉTODO rutina_agregar_ejercicio(nombre_rutina: CADENA, nombre_ejercicio: CADENA) → NADA:
        r ← _buscar_rutina(nombre_rutina)
        SI r = NULO → ERROR "Rutina no encontrada."
        ej ← _buscar_ejercicio_catalogo(nombre_ejercicio)
        SI ej = NULO → ERROR "Ese ejercicio no existe en el catálogo."
        r.agregar_ejercicio(ej)
    FIN

    MÉTODO rutina_eliminar_ejercicio(nombre_rutina: CADENA, nombre_ejercicio: CADENA) → NADA:
        r ← _buscar_rutina(nombre_rutina)
        SI r = NULO → ERROR "Rutina no encontrada."
        r.eliminar_ejercicio(nombre_ejercicio)
    FIN

    MÉTODO rutina_actualizar_ejercicio(nombre_rutina: CADENA, nombre_ejercicio: CADENA, repeticiones?: ENTERO, series?: ENTERO) → NADA:
        r ← _buscar_rutina(nombre_rutina)
        SI r = NULO → ERROR "Rutina no encontrada."
        r.actualizar_ejercicio(nombre_ejercicio, repeticiones, series)
    FIN

    // ------- Asignación y Reporte -------
    MÉTODO asignar_rutina_a_usuario(nombre_usuario: CADENA, nombre_rutina: CADENA) → NADA:
        u ← _buscar_usuario(nombre_usuario)
        SI u = NULO → ERROR "Usuario no encontrado."
        r ← _buscar_rutina(nombre_rutina)
        SI r = NULO → ERROR "Rutina no encontrada."
        u.asignar_rutina(r)
    FIN

    MÉTODO reporte_por_usuario() → NADA:
        SI TAM(usuarios) = 0 → IMPRIMIR "No hay usuarios."; RETORNAR
        IMPRIMIR REPETIR("=", 60)
        i ← 0
        MIENTRAS i < TAM(usuarios):
            u ← usuarios[i]
            IMPRIMIR "Usuario: " + u.nombre + " | Edad: " + STR(u.edad)
            SI TAM(u.rutinas) = 0:
                IMPRIMIR "  (Sin rutinas asignadas)"
            SINO:
                j ← 0
                MIENTRAS j < TAM(u.rutinas):
                    r ← u.rutinas[j]
                    IMPRIMIR "  - " + r.nombre + ": " + Utilidades.minutos_a_texto(r.duracion_total_min())
                    j ← j + 1
                FIN
            FIN
            IMPRIMIR REPETIR("=", 60)
            i ← i + 1
        FIN
    FIN

    // ------- Menús de terminal -------
    MÉTODO menu() → NADA:
        MIENTRAS VERDADERO:
            IMPRIMIR menú_principal_opciones
            op ← TRIM(LEER("Opción: "))
            INTENTA:
                SEGÚN op:
                    "1": ESTE.menu_usuarios()
                    "2": ESTE.menu_ejercicios()
                    "3": ESTE.menu_rutinas()
                    "4":
                        u ← _input_no_vacio("Usuario: ")
                        IMPRIMIR "\nRutinas disponibles:"; ESTE.listar_rutinas()
                        r_line ← _input_no_vacio("Rutinas (separadas por coma): ")
                        nombres_rutinas ← PARSEAR_COMAS_TRIM_NO_VACÍAS(r_line)
                        errores ← []
                        i ← 0
                        MIENTRAS i < TAM(nombres_rutinas):
                            nombre_r ← nombres_rutinas[i]
                            INTENTA: ESTE.asignar_rutina_a_usuario(u, nombre_r)
                            CAPTURA ValueError e: AÑADIR (nombre_r + ": " + e.mensaje) A errores
                            i ← i + 1
                        FIN
                        SI TAM(errores) > 0:
                            IMPRIMIR "Algunos errores al asignar rutinas:" y listar errores
                        SINO:
                            IMPRIMIR "Rutinas asignadas."
                    "5":
                        nombre ← _input_no_vacio("Usuario: ")
                        ESTE.mostrar_rutinas_de_usuario(nombre)
                    "6": ESTE.reporte_por_usuario()
                    "7": IMPRIMIR "Hasta luego."; ROMPER
                    OTRO: IMPRIMIR "Opción no válida."
            CAPTURA ValueError e:
                IMPRIMIR "[Error] " + e.mensaje
        FIN
    FIN

    MÉTODO menu_usuarios() → NADA:
        MIENTRAS VERDADERO:
            IMPRIMIR opciones_usuarios
            op ← TRIM(LEER("Opción: "))
            SI op = "1":
                // agregar
                MIENTRAS VERDADERO:
                    nombre ← _input_no_vacio("Nombre: ")
                    SI _buscar_usuario(nombre) ≠ NULO → IMPRIMIR "Ya existe..."; CONTINUAR
                    ROMPER
                FIN
                edad ← _input_int("Edad: ", 16, 100)
                INTENTA: agregar_usuario(nombre, edad); IMPRIMIR "Usuario agregado."
                CAPTURA ValueError e: IMPRIMIR "[Error] " + e.mensaje
            SINO SI op = "2": listar_usuarios()
            SINO SI op = "3":
                nombre ← _input_no_vacio("Nombre del usuario a editar: ")
                usuario ← _buscar_usuario(nombre)
                SI usuario = NULO → IMPRIMIR "No existe ese usuario."; CONTINUAR
                MIENTRAS VERDADERO:
                    IMPRIMIR submenú_editar_usuario(usuario.nombre)
                    subop ← TRIM(LEER("Opción: "))
                    SI subop = "1":
                        nuevo ← _input_no_vacio("Nuevo nombre: ")
                        SI _buscar_usuario(nuevo) ≠ NULO → IMPRIMIR "Ya existe..."; CONTINUAR
                        old_key ← Utilidades.normalizar(usuario.nombre)
                        INTENTA:
                            usuario.cambiar_nombre(nuevo)
                            ELIMINAR idx_usuarios[old_key]
                            idx_usuarios[Utilidades.normalizar(usuario.nombre)] ← usuario
                            IMPRIMIR "Nombre actualizado."
                        CAPTURA ValueError e:
                            IMPRIMIR "[Error] " + e.mensaje
                    SINO SI subop = "2":
                        INTENTA:
                            nueva_edad ← _input_int("Nueva edad: ", 16, 100)
                            usuario.cambiar_edad(nueva_edad)
                            IMPRIMIR "Edad actualizada."
                        CAPTURA ValueError e:
                            IMPRIMIR "[Error] " + e.mensaje
                    SINO SI subop = "3": ROMPER
                    SINO: IMPRIMIR "Opción no válida."
                FIN
            SINO SI op = "4": RETORNAR
            SINO: IMPRIMIR "Opción no válida."
        FIN
    FIN

    MÉTODO menu_ejercicios() → NADA:
        MIENTRAS VERDADERO:
            IMPRIMIR opciones_ejercicios
            op ← TRIM(LEER("Opción: "))
            SI op = "1":
                // crear
                MIENTRAS VERDADERO:
                    nombre ← _input_no_vacio("Nombre: ")
                    SI _buscar_ejercicio_catalogo(nombre) ≠ NULO → IMPRIMIR "Ya existe..."; CONTINUAR
                    ROMPER
                FIN
                reps ← _input_int("Repeticiones: ", 1, 100)
                series ← _input_int("Series: ", 1, 100)
                INTENTA: crear_ejercicio(nombre, reps, series)
                CAPTURA ValueError e: IMPRIMIR "[Error] " + e.mensaje
            SINO SI op = "2": listar_ejercicios()
            SINO SI op = "3":
                nombre ← _input_no_vacio("Nombre del ejercicio a editar: ")
                ejercicio ← _buscar_ejercicio_catalogo(nombre)
                SI ejercicio = NULO → IMPRIMIR "No existe ese ejercicio."; CONTINUAR
                MIENTRAS VERDADERO:
                    IMPRIMIR submenú_editar_ejercicio(ejercicio.nombre)
                    subop ← TRIM(LEER("Opción: "))
                    SI subop = "1":
                        nuevo ← _input_no_vacio("Nuevo nombre: ")
                        SI _buscar_ejercicio_catalogo(nuevo) ≠ NULO → IMPRIMIR "Ya existe..."; CONTINUAR
                        old_key ← Utilidades.normalizar(ejercicio.nombre)
                        INTENTA:
                            ejercicio.cambiar_nombre(nuevo)
                            ELIMINAR idx_ejercicios[old_key]
                            idx_ejercicios[Utilidades.normalizar(ejercicio.nombre)] ← ejercicio
                            IMPRIMIR "Nombre actualizado."
                        CAPTURA ValueError e: IMPRIMIR "[Error] " + e.mensaje
                    SINO SI subop = "2":
                        INTENTA:
                            nuevas_reps ← _input_int("Nuevas repeticiones: ", 1, 100)
                            ejercicio.actualizar(repeticiones=nuevas_reps)
                            IMPRIMIR "Repeticiones actualizadas."
                        CAPTURA ValueError e: IMPRIMIR "[Error] " + e.mensaje
                    SINO SI subop = "3":
                        INTENTA:
                            nuevas_series ← _input_int("Nuevas series: ", 1, 100)
                            ejercicio.actualizar(series=nuevas_series)
                            IMPRIMIR "Series actualizadas."
                        CAPTURA ValueError e: IMPRIMIR "[Error] " + e.mensaje
                    SINO SI subop = "4": ROMPER
                    SINO: IMPRIMIR "Opción no válida."
                FIN
            SINO SI op = "4":
                nombre ← _input_no_vacio("Nombre a eliminar: ")
                INTENTA:
                    eliminar_ejercicio(nombre)
                    IMPRIMIR "Ejercicio eliminado del catálogo."
                CAPTURA ValueError e:
                    IMPRIMIR "[Error] " + e.mensaje
            SINO SI op = "5": RETORNAR
            SINO: IMPRIMIR "Opción no válida."
        FIN
    FIN

    MÉTODO menu_rutinas() → NADA:
        MIENTRAS VERDADERO:
            IMPRIMIR opciones_rutinas
            op ← TRIM(LEER("Opción: "))
            SI op = "1":
                SI TAM(ejercicios_catalogo) = 0 → IMPRIMIR "Primero crea ejercicios..."; CONTINUAR
                MIENTRAS VERDADERO:
                    nombre ← _input_no_vacio("Nombre de la rutina: ")
                    SI _buscar_rutina(nombre) ≠ NULO → IMPRIMIR "Ya existe..."; CONTINUAR
                    ROMPER
                FIN
                desc ← _input_no_vacio("Descripción: ")
                IMPRIMIR "\nEjercicios disponibles (separa por coma):"
                listar_ejercicios()
                MIENTRAS VERDADERO:
                    sel ← TRIM(LEER("Nombres a incluir (separados por coma): "))
                    tmp ← SPLIT(sel, ",")
                    nombres ← []
                    i ← 0
                    MIENTRAS i < TAM(tmp):
                        n ← TRIM(tmp[i])
                        SI n ≠ "" → AÑADIR n A nombres
                        i ← i + 1
                    FIN
                    SI TAM(nombres) = 0 → IMPRIMIR "Debes seleccionar al menos un ejercicio."; CONTINUAR
                    INTENTA:
                        crear_rutina(nombre, desc, nombres)
                        IMPRIMIR "Rutina creada."
                        ROMPER      // vuelve al menú de rutinas
                    CAPTURA ValueError e:
                        IMPRIMIR "[Error] " + e.mensaje   // permanece en el sub-bloque de creación
                FIN
            SINO SI op = "2":
                listar_rutinas()
            SINO SI op = "3":
                nombre ← _input_no_vacio("Nombre de la rutina a editar: ")
                r ← _buscar_rutina(nombre)
                SI r = NULO → IMPRIMIR "No existe esa rutina."; CONTINUAR
                submenu_editar_rutina(r)
            SINO SI op = "4": RETORNAR
            SINO: IMPRIMIR "Opción no válida."
        FIN
    FIN

    MÉTODO submenu_editar_rutina(r: Rutina) → NADA:
        MIENTRAS VERDADERO:
            IMPRIMIR cabecera_edición(r.nombre)
            op ← TRIM(LEER("Opción: "))
            SI op = "1":
                SI TAM(ejercicios_catalogo) = 0 → IMPRIMIR "Catálogo vacío..."; CONTINUAR
                listar_ejercicios()
                nombre ← _input_no_vacio("Nombre del ejercicio a agregar: ")
                INTENTA:
                    rutina_agregar_ejercicio(r.nombre, nombre)
                    IMPRIMIR "Ejercicio agregado a la rutina."
                CAPTURA ValueError e:
                    IMPRIMIR "[Error] " + e.mensaje   // NO reintenta automáticamente; vuelve al submenú
            SINO SI op = "2":
                nombre ← _input_no_vacio("Nombre del ejercicio a eliminar: ")
                INTENTA: rutina_eliminar_ejercicio(r.nombre, nombre); IMPRIMIR "Ejercicio eliminado de la rutina."
                CAPTURA ValueError e: IMPRIMIR "[Error] " + e.mensaje
            SINO SI op = "3":
                nombre ← _input_no_vacio("Ejercicio a actualizar: ")
                rep_txt ← TRIM(LEER("Nuevas repeticiones (enter para mantener): "))
                ser_txt ← TRIM(LEER("Nuevas series (enter para mantener): "))
                rep ← NULO; ser ← NULO
                SI rep_txt ≠ "" → rep ← ENTERO(rep_txt)
                SI ser_txt ≠ "" → ser ← ENTERO(ser_txt)
                INTENTA: rutina_actualizar_ejercicio(r.nombre, nombre, rep, ser); IMPRIMIR "Ejercicio actualizado."
                CAPTURA ValueError e: IMPRIMIR "[Error] " + e.mensaje
            SINO SI op = "4":
                nuevo ← TRIM(LEER("Nuevo nombre (enter=mantener): "))
                desc ← TRIM(LEER("Nueva descripción (enter=mantener): "))
                INTENTA:
                    editar_rutina(r.nombre,
                                  nuevo_nombre = (NULO SI nuevo = "" SINO nuevo),
                                  nueva_desc   = (NULO SI desc = "" SINO desc))
                    IMPRIMIR "Datos actualizados."
                CAPTURA ValueError e:
                    IMPRIMIR "[Error] " + e.mensaje
            SINO SI op = "5":
                IMPRIMIR "Duración total: " + Utilidades.minutos_a_texto(r.duracion_total_min())
            SINO SI op = "6":
                SI TAM(r.ejercicios) = 0 → IMPRIMIR "(Sin ejercicios)"
                SINO:
                    i ← 0
                    MIENTRAS i < TAM(r.ejercicios):
                        IMPRIMIR "  • " + r.ejercicios[i].__str__()
                        i ← i + 1
                    FIN
            SINO SI op = "7": RETORNAR
            SINO: IMPRIMIR "Opción no válida."
        FIN
    FIN
FIN CLASE

ALGORITMO PRINCIPAL:
    SI __name__ = "__main__" ENTONCES:
        sistema ← NUEVO SistemaGestion()
        INTENTA:
            sistema.menu()
        CAPTURA KeyboardInterrupt:
            IMPRIMIR "\n¡Hasta luego!"
    FIN SI
FIN
